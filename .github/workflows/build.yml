name: Build Recipes

on:
  push:
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"
      - name: Install pyodide-build and build dependencies
        run : |
          pip install git+https://github.com/ryanking13/pyodide.git@build-recipes-oot#subdirectory=pyodide-build

          sudo apt update
          sudo apt install gfortran f2c
          
      - name: Check emscripten version
        run: |
          echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV
      - uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
      - name: Build recipes
        run: |
          pyodide build-recipes "*,!scipy" --install --install-dir=./repodata

      - name: Store artifacts build
        uses: actions/upload-artifact@v2
        with:
          name: repodata
          path: ./repodata/
          retention-days: 15

  test:
    runs-on: ubuntu-20.04
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        pyodide-version: [0.22.1]
        test-config: [
          {runner: selenium, runtime: chrome, runtime-version: latest },
        ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - uses: pyodide/pyodide-actions/download-pyodide@v1
        with:
          version: 0.22.1
          to: dist

      - uses: pyodide/pyodide-actions/install-browser@v1
        with:
          runner: ${{ matrix.test-config.runner }}
          browser: ${{ matrix.test-config.runtime }}
          browser-version: ${{ matrix.test-config.runtime-version }}

      - name: Install requirements
        shell: bash -l {0}
        run: |
          python3 -m pip install pytest pytest-pyodide
          sudo apt install jq

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: repodata
          path: ./repodata/

      - name: Copy repodata
        run: |
          cp ./repodata/* ./dist/
          jq '.info.version = "0.22.1"' dist/repodata.json | sponge dist/repodata.json

      - name: Run tests
        run: |
          pytest -v \
            --dist-dir=./dist/ \
            --runner=${{ matrix.test-config.runner }} \
            --rt ${{ matrix.test-config.runtime }} \
            packages
